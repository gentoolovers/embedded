* IO多路复用
** server
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <sys/socket.h>
  #include <arpa/inet.h>
  #include <netinet/in.h>
  #include <string.h>

  #define  N  128

  #define err_log(errlog)                                         \
      do{                                                         \
          printf("%s:%s --> %d  ", __FILE__, __func__, __LINE__); \
          perror(errlog);                                         \
          exit(1);                                                \
      }while(0)

  int main(int argc, const char *argv[])
  {

      int sockfd;
      struct sockaddr_in serveraddr, clientaddr;
      char buf[N] = {};
      char msg[N];

      if(argc < 3)
      {
          fprintf(stderr, "usage:%s serverip port.\n", argv[0]);
          return -1;
      }

      if((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
      {
          err_log("fail to socket");
      }

      printf("sockfd = %d\n", sockfd);

      serveraddr.sin_family = AF_INET;
      serveraddr.sin_addr.s_addr = inet_addr(argv[1]);
      serveraddr.sin_port = htons(atoi(argv[2]));


      socklen_t  addrlen = sizeof(struct sockaddr);

      printf("Input username:");
      fgets(buf+1, N, stdin);
      buf[strlen(buf)-1] = '\0';
      sprintf(msg,"L%s",buf);

      if(sendto(sockfd, msg, N, 0, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) < 0)
      {
          err_log("fail to sendto\n");
      }

      while(1)
      {
          FD_SET(sockfd,&readfds);
          FD_SET(0,&readfds);
          if(select(maxfd+1,&readfds,NULL,NULL,NULL) <0 )
          {
              err_log("fail to select\n");
          }
          for(i=0;i <maxfd+1;i++)
          {
              if(FD_SET(i,&readfds))
              {

              }
          }
          printf("Input:");
          fgets(buf+1, N, stdin);
          buf[strlen(buf)-1] = '\0';
          sprintf(msg,"C%s",buf);

          if(strncmp(buf+1, "quit", 4) == 0)
          {
              sprintf(msg,"Q%s",buf);

              if(sendto(sockfd, msg, N, 0, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) < 0)
              {
                  err_log("fail to sendto");
              }
              break;
          }


          if(sendto(sockfd, msg, N, 0, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) < 0)
          {
              err_log("fail to sendto");
          }



      }

      close(sockfd);

      return 0;
  }

#+END_SRC
** client
*  并发服务器
** 父子进程
*** server
#+BEGIN_SRC C
    #include <stdio.h>
    #include <sys/socket.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <sys/types.h>
    #include <singal.h>

    #define N 1024

    #define err_log(errlog)         \
        do{                         \
            printf("%s:%s -->%d",__FILE__,__LINE__,__FUCTION__);                              \
            perror(errlog);         \
            exit(1);                \
        }while(0)                   \


    int main(int argc,const char* argv[])
    {
        int sockfd;
        int acceptfd;
        pid_t pid;
        struct sockaddr_in serveraddr,clientaddr;
        char buf[N];
        if(argv <3)
        {
            fprintf(stderr,"Usage:%s <serverip> <port>",argv[0]);
            exit(EIXT_FAILURE);
        }

        if(signal(SIGHLD,SIG_ING) == SIG_ERR)
        {
            err_log("signal fail");
        }

        if(sockfd = socket(AF_INET,SOCK_DGRAM,0))
        {
            err_log("fail to socket");
        }
        serveraddr.sin_family=AF_INET;
        serveraddr.sin_addr.s_addr=inet_addr(argv[1]);
        serveraddr.sin_port=htons(atoi(argv[2]));
        if(bind(sockfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr)))
        {
            err_log("fail to bind");
        }

        if(listen(sockfd,15))
        {
            err_log("fail to listen");
        }
        socklen_t addrlen=sizeof(struct sockaddr);
        while(1)
        {
            if((acceptfd=accept(sockfd,(struct sockaddr*)&clientaddr,&addrlen) ))
            {
                err_log("fail to accept");
            }
            if((pid=fork()) < 0)
            {
                err_log("fail to fork");
            }
            if(pid ==0)
            {
                close(sockfd);
                while(1)
                {
                    recv(acceptfd,buf,N,0);
                    if(strncmp(buf,"quit",4) == 0)
                    {
                        break;
                    }
                    strcat(buf, " from server.");

                    send(acceptfd, buf, N, 0);
                }
            }else
            {

                close(acceptfd);
            }

        }
        close(acceptfd);
        close(sockfd);


    }

#+END_SRC
*** client
** IO多路复用
*** server
#+BEGIN_SRC C

#+END_SRC

*** client
