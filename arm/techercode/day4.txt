@ ARM指令的条件执行
/*
MAIN:
	mov r1, #1
	mov r2, #2
	mov r3, #3
	cmp r3, #3
	bne FUNC
	mov r4, #4
	mov r5, #5

FUNC:
	mov r6, #6
	mov r7, #7
*/
	@ 通过添加后缀来实现指令的条件执行
	@ 练习
/*
loop:s
	cmp r0, r1
	beq stop          @ if(eq) b stop
	subgt r0, r0, r1  @ if(gt) r0 = r0 - r1
	sublt r1, r1, r0
	b loop
*/

/*Load/Stor指令*/
	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ str r0, [r1]
	@ 将r0中的数据存储到以r1为起始地址的四个字节的内存单元中

	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ strb r0, [r1]
	@ 将r0中的[7:0]存储到r1指向的内存单元

	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ strh r0, [r1]
	@ 将r0中[15:0]数据存储到以r1为起始地址的2个字节的内存单元中

	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ str r0, [r1]
	@ ldr r2, [r1]
	@ 将r1指向的内存单元中的值读取到r2寄存器
	@ 读取指令也可以添加后缀

@ 索引方式
	@ 前索引
	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ str r0, [r1, #4]
	@ 将r0中的数据存储到r1+4内存中
	@ mov r2, #8
	@ str r0, [r1, r2]
	@ 将r0中的数据存储到r1+r2内存中
	@ str r0, [r1, r2, lsl #1]
	@ r1 + (r2 << 1)

	@ 后索引
	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ str r0, [r1], #4
	@ 将r0存储到r1指向的内存单元中  然后r1 = r1 + 4

	@ 自动索引
	@ mov r0, #0xaa
	@ mov r1, #0x41000000
	@ str r0, [r1, #8]!
	@ 将r0存储到1r+8地址中，然后r1=r1+8
	@ 在地址后加‘!’使用完地址后地址自增

@ 批量数据存储
	@ mov r1, #1
	@ mov r2, #2
	@ mov r3, #3
	@ mov r4, #4
	@ mov r5, #5
	@ mov r11,#0x41000000
	@ stm r11, {r1-r5}
	@ 将r1-r5寄存器中的值存储到以r11为起始地址的内存单元中
	@ stm r11!, {r1,r3,r5}
	@ 编号小的寄存器对应的存储到低地址
	@ 加上'!'后存储完以后地址值自动更新

	@ 增长方式
	@ mov r1, #1
	@ mov r2, #2
	@ mov r3, #3
	@ mov r4, #4
	@ mov r5, #5
	@ mov r11,#0x41000000
	@ stmda r11!, {r1-r2}
	@ stmda r11!, {r1-r5}

	@ IA 先使用后增长
	@ IB 先增长后使用
	@ DA 先使用后递减
	@ DB 先递减后使用

	@ 将r1-r5存储到r11为起始地址的内存单元  然后将该数据再读取到r6-r10寄存器
	@ stmia r11!, {r1-r5}
	@ ldmda r11!,{r6-r10}
/*
	mov r1, #1
	mov r2, #2
	mov r3, #3
	mov r4, #4
	mov r5, #5
	mov r11,#0x41000000
	stmfd r11!, {r1-r5}
	ldmfd r11!, {r6-r10}
*/
	@ 栈的种类
	@ fd满减  fa满增  ed空减  ea空增
	@ 一般使用满减栈
	@ 使用什么后缀压栈  就使用什么后缀的出栈指令  这样不会出现错误

	@ 初始化栈
	@ mov sp, #0x41000000
/*
MIAN:
	mov r0, #1
	mov r1, #1

	bl FUNC              @ 子函数调用
	add r2, r0, r1
	b stop

FUNC:
	stmfd sp!, {r0,r1}   @ 压栈
	mov r0, #2
	mov r1, #4
	sub r2, r1, r0
	ldmfd sp!,{r0-r1}    @ 出栈
	mov pc, lr           @ 子程序返回
*/
/*
MIAN:
	mov r0, #1
	mov r1, #1

	bl FUNC              @ 子函数调用
	add r2, r0, r1
	b stop

FUNC:
	stmfd sp!, {r0-r1,lr}   @ 压栈  将返回地址压栈
	mov r0, #2
	mov r1, #4
	sub r2, r1, r0
	ldmfd sp!,{r0-r1,pc}    @ 出栈  将LR中的值出栈到PC  实现了子程序的返回
*/

	@ swp r0, r1, [r2]
	@ 将r2地址中的数据加载到r0寄存器，然后将r1中的数据存储到r2指向的内存中
	@ 优点：单条指令可以实现内存与处理器之间的数据交换  中间不会被打断

/*状态寄存器传送指令*/
	@ mrs r0, cpsr
	@ 读取CPSR中的值到R0寄存器
	@ bic r0, r0, #0x1f
	@ orr r0, r0, #0x10
	@ 修改r0中的值
	@ msr cpsr, r0
	@ 将r0中的数据写入CPSR

	@ 一般用于模式的切换
	@ 对CPSR的操作 读-改-写
	@ 当前在哪种模式下使用哪种模式下的寄存器  编程的时候不需要专门指定

/*异常中断产生指令*/
	@ swi 1

/*协处理器指令*/
	@ MRC 将协处理器中寄存器的值传送到处理器寄存器
	@ MCR 将处理器中寄存器的值传送到协处理器寄存器

/*伪指令*/
	@ ldr r0, =0x12345678
	@ 将0x12345678放入r0寄存器
	@ 先将0x12345678放在内存当中  然后再通过内存访问指令将其读取   进行了指令的替换
	@ ldr r0, =55
	@ 根据伪指令书写方式的不同  最终生成的指令可能也不同

/*伪操作*/
		@ .global _start
		@ 声明一个全局的符号

		@ .local
		@ 定义一个局部的符号

		@ .equ GPF3DAT,0x114001E4
		@  mov r0, #GPF3DAT
		@ 宏替换指令

		@ .word 1
		@ 在当前内存单元申请一个字的空间并将其初始化
		@ .byte
		@ mov r0, r0
		@ .space 1000, 1
		@ ldr sp, =0x40008000
		@ mov r0, #1
		@ 在当前地址申请100个字节的内存空间  并将其全部初始化为1

		@ .if 0
		@ 	mov r0, #1
		@ .endif

		@ .arm
		@ .bss

/*C与汇编混合编程*/
	@ ATPCS协议
	@ 1.使用满减栈
	@ 2.参数保存在R0-R3  返回值保存在R0

	@ 混合编程
	@ 1.C调用汇编
/*
汇编文件
loop:
	mov r0,#1
	mov pc, lr

	extern void loop(void);
	int main()
	{
		loop();
		func();
	}
*/

	@ 2.汇编调用C
	/*
		b main
	*/
	@ 3.C内嵌汇编
	/*
	int main()
	{
		int a;
		asm
		(
			"mov r0, #1\n"
		);
		a=0;
	}
	*/