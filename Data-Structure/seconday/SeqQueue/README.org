* 第二天<2016-07-22 Fri>
** 顺序队列
**** 头文件
#+BEGIN_SRC C :main no :tangle SeqQueue.h
  typedef int datatype;
  #define N 5

  typedef struct {
    datatype data[N];
    int front;
    int rear;
  }sequeue;

  sequeue * queue_create();
  int queue_empty(sequeue *sq);
  int inqueue(sequeue * sq, datatype value);
  datatype dequeue(sequeue * sq);
  int queue_full(sequeue * sq);
  int queue_clear(sequeue * sq);
  typedef int datatype;
  #define N 5

#+END_SRC
**** 源代码文件
#+BEGIN_SRC c :main no :tangle SeqQueue.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "SeqQueue.h"

  sequeue * queue_create() {
    sequeue* ret=NULL;
    ret=(sequeue*)malloc(sizeof(sequeue));
    if(ret=NULL)
      {

        printf("malloc sequeue failed");
        return ret;
      }
    bzero(ret->data,sizeof(ret->data));
    ret->front=0;
    ret->rear=0;
    return ret;
  }
  int queue_empty(sequeue *sq) {

    int ret=(sq != NULL);
    if(ret)
      {

        if(sq->front==sq->rear)
          {

            return ret;
          }else{
          return 0;
        }

      }
    return ret;
  }
  int inqueue(sequeue * sq, datatype value)
  {
    int ret=(sq != NULL) && (sq->rear+1)%N != sq->front;
    if(ret)
      {
        sq->data[sq->rear]=value;
        sq->rear=(sq->rear+1)/N;

      }
    return ret;
  }
  datatype dequeue(sequeue * sq)
  {
    int ret=(sq != NULL)&& (sq->front != sq->rear);
    if(ret) {
      sq->rear=sq->data[sq->front];
      sq->front=(sq->front+1)%N;

      }
    return ret;
  }
  int queue_full(sequeue * sq){
    int ret=(sq != NULL);
    if(ret && (sq->rear+1)%N == sq->front)
      {
        return ret;

      }
    return ret;
  }
  int queue_clear(sequeue * sq){
      int ret=(sq != NULL);
      if(ret) {

        sq->front == sq->rear;
      }
    return ret;
  }

#+END_SRC
**** 主函数
#+BEGIN_SRC C :main no :tangle main.c
  #include <stdio.h>
  #include <stdlib.h>
  #include "SeqQueue.h"

  int main(int argc, const char *argv[])
  {
/*  sequeue * sq;

    if ((sq = queue_create()) == NULL) {
      return 0;
    }
    
    enqueue(sq, 30);
    enqueue(sq, 60);
    enqueue(sq, 90);

    while (!queue_empty(sq)) {
      printf("%d ", dequeue(sq));
    }
    puts("");
    free(sq);
    sq=NULL;
*/
    return 0;
  }
#+END_SRC
**** Makefile
#+BEGIN_SRC makefile :tangle Makefile
  OBJS=SeqQueue.o main.o
  CC=gcc
  CFLAGS= -g -Wall
  SeqQueue:$(OBJS)
      $(CC) $(CFLAGS) -o $@ $^
  SeqQueue.o:SeqQueue.c SeqQueue.h
      $(CC) $(CFLAGS) -o $@ $^
  main.o:main.c SeqQueue.h
      $(CC) $(CFLAGS) -o $@ $^

#+END_SRC
