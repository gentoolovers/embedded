* 第一天<2016-07-21 Thu>
** 单项循环链表
**** 头文件
#+BEGIN_SRC C :main no :tangle CircleList.h
  #ifndef _CIRCLELIST_H
  #define _CIRCLELIST_H
  typedef void CircleList;
  typedef struct _tag_CircleListNode CircleListNode;
  struct _tag_CircleListNode
  {
    CircleListNode* next;
  };
   CircleList* CircleList_Create();

  void CircleList_Destroy(CircleList* list);

  void CircleList_Clear(CircleList* list);

  int CircleList_Length(CircleList* list);

  int CircleList_Insert(CircleList* list, CircleListNode* node, int pos);

  CircleListNode* CircleList_Get(CircleList* list, int pos);

  CircleListNode* CircleList_Delete(CircleList* list, int pos);

  CircleListNode* CircleList_DeleteNode(CircleList* list, CircleListNode* node);

  CircleListNode* CircleList_Reset(CircleList* list);

  CircleListNode* CircleList_Current(CircleList* list);

  CircleListNode* CircleList_Next(CircleList* list);


  #endif

#+END_SRC
**** 源代码文件
#+BEGIN_SRC C :main no :tangle CircleList.c
  #include <stdio.h>
  #include <stdlib.h>
  #include "CircleList.h"

  typedef struct CircleList
  {
    CircleListNode header;
      CircleListNode* slider;
      int length;
  }TCircleList;

  CircleList* CircleList_Create()
  {
      TCircleList* ret=(TCircleList*)malloc(sizeof(TCircleList));
      if(ret)
      {

          ret->header.next=NULL;
          ret->slider=NULL;
          ret->length=0;
      }else
      {

          printf("malloc CircleList failed");
          return NULL;
      }
      return ret;

  }

  void CircleList_Destroy(CircleList* list)
  {

      free(list);
      list=NULL;
  }

  void CircleList_Clear(CircleList* list)
  {

      TCircleList* CList=(TCircleList*)list;
      if(CList != NULL)
      {

          CList->header.next=NULL;
          CList->slider=NULL;
          CList->length=0;
      }
  }

  int CircleList_Length(CircleList* list)
  {
      TCircleList* CList=(TCircleList*)list;
      int ret=-1;
      if(CList !=NULL)
      {
          ret=CList->length;

      }
      return ret;

  }

  int CircleList_Insert(CircleList* list, CircleListNode* node, int pos)
  {

      TCircleList* CList=(TCircleList*)list;
      int ret=(CList != NULL) && (node != NULL) && (pos >=0);
      int i=0;
      if(ret)
      {
          CircleListNode* current=(CircleListNode*)CList;
          for(i=0;(i<pos) && (current->next !=NULL);i++)
          {

              current=current->next;
          }
          node->next=current->next;
          current->next=node;
          if(0==CList->length)
          {

              CList->slider=node;
          }
          CList->length++;
          if(current ==(CircleListNode*)CList)
          {

              CircleListNode* last=CircleList_Get(CList,CList->length-1);
              last->next=current->next;
          }

      }
      return ret;
  }

  CircleListNode* CircleList_Get(CircleList* list, int pos)
  {

      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      int i=0;
      if((CList != NULL) && (0<=pos)&& (CList->length>0))
      {
          CircleListNode* current=(CircleListNode*)CList;
          for(i=0;i<pos;i++)
          {
              current=current->next;

          }
          ret=current->next;

      }
      return ret;
  }
  /*
  删除第一个元素时,出了需要让链表的链跳过要删除的元素之外,还需要让最后一个元素的next指向第一个元素.
  删除slider指向的元素时,需要把游标指向下一个元素.
  删除整个链表的最后一个元素时,需要把游标指向空,表头的next也指向空.

   ,*/
  CircleListNode* CircleList_Delete(CircleList* list, int pos)
  {

      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      int i=0;
      if((CList != NULL) && (0<=pos) &&(CList->length >0))
      {
          CircleListNode* current=(CircleListNode*)CList;
          CircleListNode* last=NULL;
          for(i=0;i<pos;i++)
          {

              current=current->next;
          }
          if(current ==(CircleListNode*)CList)
          {
              last=CircleList_Get(CList,CList->length-1);

          }
          ret=current->next;
          current->next=ret->next;
          CList->length--;

          if(last != NULL)
          {

              CList->header.next=ret->next;
              last->next=ret->next;
          }
          if(CList->slider ==ret)
          {

              CList->slider=ret->next;
          }
          if(0==CList->length)
          {

              CList->header.next=NULL;
              CList->slider=NULL;
          }

      }
      return ret;
  }

  CircleListNode* CircleList_DeleteNode(CircleList* list, CircleListNode* node)
  {

      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      int i=0;
      if((CList != NULL)&& (node != NULL))
      {
          CircleListNode* current=(CircleListNode*)CList;
          for(i=0;i<CList->length;i++)
          {

              if(current->next == node)
              {

                  ret=current->next;
                  break;
              }
              current=current->next;
          }
          if(ret)
          {
              CircleList_Delete(CList,i);
          }

      }
      return ret;
  }

  CircleListNode* CircleList_Reset(CircleList* list)
  {
      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      if(CList !=NULL)
      {

          CList->slider=CList->header.next;
          ret=CList->slider;
      }
      return ret;


  }

  CircleListNode* CircleList_Current(CircleList* list)
  {

      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      if(CList != NULL)
      {

          ret=CList->slider;

      }
      return ret;
  }

  CircleListNode* CircleList_Next(CircleList* list)
  {

      TCircleList* CList=(TCircleList*)list;
      CircleListNode* ret=NULL;
      if((CList != NULL)&& (CList->slider !=NULL))
      {
          CList->slider=CList->slider->next;
          ret=CList->slider;
      }
      return ret;
  }




  int CircleList_GetPos(CircleList* list,CircleListNode* node)
  {
      TCircleList* CList=(TCircleList*)list;
      int i=0;
      if((CList != NULL))
      {

          CircleListNode* current=(CircleListNode*)CList;
          for(i=0;i<CList->length;i++)
          {

              if(current->next=node)
              {

                  return i;
              }
              current=current->next;
          }

      }
      return -1;

  }
#+END_SRC
**** 主函数
#+BEGIN_SRC C :main no :tangle main.c
  #include <stdio.h>
  #include <stdlib.h>
  #include "CircleList.h"

  struct Value
  {
      CircleListNode header;
      int v;
  };

  void CircleList_joseph(CircleList* list,int start,int n)
  {

      if(list !=NULL)
      {
          int i=0;
          CircleList_Reset(list);

          for(i=0;i<start;i++)
          {
              CircleList_Next(list);

          }

          while(0<CircleList_Length(list))
          {
              int j=0;
              struct Value* show = (struct Value*)CircleList_DeleteNode(list,  CircleList_Current(list));
              printf("%d\n", show->v);

              for(j=0;(j<n) &&( CircleList_Current(list) !=NULL);j++)
              {

                  CircleList_Next(list);
              }

          }

      }
  }

  int main(int argc, char *argv[])
  {
      CircleList* list = CircleList_Create();

      struct Value v1;
      struct Value v2;
      struct Value v3;
      struct Value v4;
      struct Value v5;
      struct Value v6;
      struct Value v7;
      struct Value v8;

      int i = 0;

      v1.v = 1;
      v2.v = 2;
      v3.v = 3;
      v4.v = 4;
      v5.v = 5;
      v6.v = 6;
      v7.v = 7;
      v8.v = 8;

      CircleList_Insert(list, (CircleListNode*)&v1, 0);
      CircleList_Insert(list, (CircleListNode*)&v2, 0);
      CircleList_Insert(list, (CircleListNode*)&v3, 0);
      CircleList_Insert(list, (CircleListNode*)&v4, 0);
      CircleList_Insert(list, (CircleListNode*)&v5, 0);
      CircleList_Insert(list, (CircleListNode*)&v6, 0);
      CircleList_Insert(list, (CircleListNode*)&v7, 0);
      CircleList_Insert(list, (CircleListNode*)&v8, 0);

      for(i=0; i<CircleList_Length(list); i++)
      {
          struct Value* pv = (struct Value*)CircleList_Get(list, i);

          printf("%d\n", pv->v);
      }
      puts(" ");
      CircleList_joseph(list,0,2);

      printf("\n");

      CircleList_Destroy(list);

      return 0;
  }

#+END_SRC
