* 第一天<2016-07-28 Th>
** 基本概念
1.库 : 一组实现好的函数接口
2.系统调用:操作系统给用户空间提供的一组函数接口,我们可以通过这一组函数接口进入内核空间，从而使用
内核提供的服务
3.在Linux中，我们可以通过open系统调用打开一个文件，可以获得一个文件描述符(fd),这个fd表示打开的文件
 ,我们可以read系统调用来读文件，可以通过write系统调用来写文件，通过close系统调用关闭文件
** 文件相关系统调用函数
*** 打开文件

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);
@pathname  文件的路径 例如:"/home/linux/hello.c"
@flags ：打开文件的方式

O_RDONLY  只读
O_WRONLY  只写
O_RDWR    读写
O_CREAT   不存在则创建
O_APPEND  追加
O_TRUNC   存在则清空

注意:
(1)这些标示可以用"|"运算符连接在一起使用
(2)如果使用了O_CREAT参数，需要指定创建文件的权限

@mode 用来指定文件创建时的权限
注意:新建文件的实际权限 mode & ~umask

返回值:
成功返回文件描述符，失败返回-1

--------------------------------------------------------------
程序运行的时候，操作系统默认打开了标准输入，标准输出，标准出错
标准输入:0
标准输出:1
标准出错:2

文件描述符分配原则:最小未使用
-------------------------------------------------------------

练习:
以读写方式打开一个文件，如果文件不存在则创建，如果文件存在则清空，程序运行结束的时候
观察新创建文件权限是多少

*** 读文件
int read(int fd, void *buf, size_t count);
参数:
@fd  打开的文件
@buf 存放数据的地址
@count 期望读取字节数
返回值:
成功实际读取的字节数，失败返回-1,读到文件尾部返回0

*** 写文件
int write(int fd, void *buf, size_t count);
参数:
@fd  打开的文件
@buf 存放数据的地址
@count 需要写入的字节数
返回值:
成功实际写入的字节数，失败返回-1

练习:实现文件拷贝

./a.out srcfile destfile

(1)打开源文件  : O_RDONLY
(2)打开目标文件: O_WRONLY | O_CREAT |O_TRUNC

(3)实现思路
   从源文件中读取数据存放在buf中，然后将buf中的数据写入目标文件

*** 文件定位
int  lseek(int fd, off_t offset, int whence);
功能:更改内核空间打开文件的offset值
参数:
@fd       打开的文件
@offset   偏移量     大于0的数->向后偏移  小于0的数->向前偏移
@whence   SEEK_SET:文件头开始   SEEK_CUR:从当前位置开始  SEEK_END:从文件尾部开始
返回值:
成功返回更新之后的offset值，失败返回-1

思考:如何文件的大小？
回答:lseek(fd,0,SEEK_END) -> 文件大小
问题:此时如果接着读文件，读取的内容是什么?
回答:此时读文件read函数返回0,表示没有数据可读

** 标准IO (C标准库提供的文件的操作函数接口)

特点:
(1)在系统调用做了一层封装，向上层提供统一的接口，屏蔽操作系统之间的差异,便于代码的移植
(2)对文件操作有缓存，读写的时候，数据先存放在缓存中，减少系统调用的次数，提高读写的效率

** 打开文件
FILE *fopen(const char *path, const char *mode);
参数:
@path   文件路径名
@mode

"r"  只读方式    ----> O_RDONLY
"r+" 读写方式    ----> O_RDWR
"w"  只写方式，如果文件不存在，则创建，文件存则清空，->O_WRONLY | O_CREAT |O_TRUNC,0666
"w+" 读写方式，如果文件不存在，则创建，文件存则清空，->O_RDWR | O_CREAT |O_TRUNC,0666
"a"  只写方式，文件尾部开始写，如果文件不存在则创建  ->O_WRONLY | O_APPEND | O_CREAT,0666
"a+" 读写方式，第一次读的时候，从文件开始读，写总是在末尾写，如果文件不存在则创建 ->O_RDWR | O_APPEND | O_CREAT,0666

返回值:
成功会返回文件流指针(标示的打开文件)，失败返回NULL

** 读写操作

(1)格式串写(格式化输出)
int printf(const char *format, ...);->格式化输出的对象：标准输出
int fprintf(FILE *stream, const char *format,...);->格式化输出的对象：一个打开的文件
int sprintf(char *str, const char *format, ...);->格式化输出的对象:内存的一块区域

练习:
以读写方式打开一个文件，文件不存在则创建，文件存在则清空,然后向文件中写入一个整数和字符串，格式如下:
字符串长度:字符串内容  例如 5:hello

要求:
需要将这种格式的数据先存放在数组buf中，然后输出，接着将buf的数据写入文件

* 第二天<2016-07-29 Fri>
** 标准输入 标准输出 标准出错
标准输入  文件描述符:0     流指针:stdin
标准输出  文件描述符:1     流指针:stdout
标准出错  文件描述符:2     流指针:stderr
** 缓存类型
*** 全缓存
   <1>缓存满
   <2>fflush刷新
   <3>程序正常退出

*** 行缓存
   <0>遇到换行符就刷新
   <1>缓存满
   <2>fflush刷新
   <3>程序正常退出

*** 不缓存
    直接输出

设计原则:
 + 默认都是全缓存，除非流和终端设备关联，此时是行缓存
 + 标准输入和标准输出和终端设备关联，他们是行缓存
 + 标准出错是不缓存
 + 标准IO读写函数

** 单个字符的读写
int fgetc(FILE *stream);
功能:
从一个指定的流中读取一个字符
返回值:
成功返回读取的字符，失败返回-1


int fputc(int c, FILE *stream);
功能:将一个字符写入一个指定的流
返回值:
成功返回写入的字符，失败返回-1

练习:
实现一个文件拷贝的功能


** 多个字符的读写(字符串读写)

char *fgets(char *s, int size, FILE *stream);
功能:每次做多从stream流中读取size - 1个字符存放在s指向的地址中
参数:
@s      存放数据的地址
@size   期望读取的大小
@stream 打开的文件
返回：
成功返回s,失败返回NULL 或者读到文件尾部返回NULL

特点:
(1)每次最多读取size - 1个字符存放
(2)每次读取的时候，遇到'\n'字符或已经读取了size - 1个字符 或者读到文件尾部会停止
(3)每次读取结束的时候，一定会加上'\0'字符

练习:
从标准输入读取数据，然后输出，如果用户直接输入的是回车键则程序运行结束
要求:存储用户输入的数据的时候，不要将用户输入的回车键进行存储


int fputs(const char *s, FILE *stream)
功能:
将一个字符串，输出(写)到指定的流,写的时候不包括'\0'字符(即:将'\0'之前的字符写入到指定的流中)
返回值:
成功返回非负的整数，失败返回-1

练习:
实现文件拷贝,要求 分别拷贝 文本文件和二进制文件，查看拷贝的效果

** 二进制文件读写

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

实际读取的数据个数 fread(数据存放的地址，数据的大小，期望读取的数据个数，流指针)

数据:
可以int ,char ,float ,double ...., 也可以是一个结构体，

size_t fwrite(const void *ptr, size_t size, size_t nmemb,FILE *stream);

实际写入的数据个数 fwrite(数据存放的地址，数据的大小，要求写入的数据个数，流指针)

练习:
实现文件拷贝

char buf[1024];
n = fread(buf,1,1024,fp_src);

** 文件定位

int fseek(FILE *stream, long offset, int whence);
参数:
@stream   流指针
@offset   大于0的数表示向后偏移，小于0的数表示向前偏移
@whence   SEEK_SET,SEEK_CUR,SEEK_END
返回值:
成功返回0,失败返回-1

long ftell(FILE *stream);
功能:返回当前文件的偏移量

void rewind(FILE *stream);
功能:定位到文件开始位置

rewind(fp) <=> fseek(fp,0,SEEK_SET);

问题:如何获取文件大小?
回答:
fseek(fp,0,SEEK_END);
len = ftell(fp);

练习:
将结构体的数据写入文件，然后读取出来给另外一个结构体变量，最后输出这个变量的值

struct student{
    char name[15];
    int  age;
    float score;
};

struct student stu1 = {"xiaoming",10,50}; //写入文件中存放
struct student stu2;
从文件中读取学生的信息给stu2，然后输出stu2

** Linux 下库的制作与使用

静态库:程序在编译的时候，如果链接的是静态库，会把程序中需要调用的函数接口实现代码从静态库中拷贝到
可执行程序文件中，生成的可执行文件体积大，程序在运行的时候，不需要库的支持

动态库:程序在编译的时候，如果链接的是动态库，此时在可执行文件的头信息中记录动态库的名字，在程序
运行的时候，操作系统会读取可执行文件的头信息，从而知道可执行文件在运行的时候，需要加载那些动态库,

注意:动态连接的时候，生成可执行文件体积小，但是程序在运行的时候，需要加载动态库
*** Linux 库的格式
  静态库  libname.a
  动态库  libname.so

  问题:如libjpeg.so 这个库的名字是什么?
  回答:库的名字jpeg
*** gcc 编译器的参数
  -I (指定头文件路径)  指定编译器搜索头文件路径的路径，默认在/usr/include 目录下搜索
  -L (指定库的路径) 指定编译器在链接库的时候，搜索的路径，默认在/usr/lib 和 /lib搜索
  -l (指定库的名字)指定编译器链接时候，库的名字

  注意:
  默认情况gcc只能识别它自带的库，无法识别第三方库(不是gcc携带的)


*** 静态库
  <1>将 xxx.c 编译成 xxx.o
     gcc -c xxx.c -o xxx.o
  <2>将xxx.o打包生成静态库
     ar -cr  libxxx.a  *.o

  <3>使用
     gcc  xxx.c -L 库的路径  -l库的名字


*** 动态库
  <1>将 xxx.c 编译成 xxx.o
     gcc -c xxx.c -o xxx.o
  <2>将xxx.o打包生成动态库
    gcc  -shared *.o  -o libdll.so

  <3>查看可执行文件依赖的动态库
    readelf -a  xxx | grep "Shared"

  <4>使用
    [1]编译时(编译器)
       gcc  xxx.c -L 库的路径  -l库的名字

    [2]运行时(操作系统)
       操作系统在运行可执行文件的时候，会读取可执行文件的头信息，然后加载头信息中记录的动态库
       操作系统默认加载动态库搜索路径
       <1>在LD_LIBRARY_PATH环境变量中包含的路径搜索
       <2>在/usr/lib 和 /lib目录下搜索

       将自己的动态库所在的路径添加到环境变量中
       export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库的路径

       将它写入用户主目录下.bashrc或者/etc/bash.bashrc中可以永久有效
----------------------------------------------------------------------------------------------------------
问题:如果动态和静态库同时在一个目录下存在，编译器默认链接的时候，是什么库呢?
回答:默认链接的是动态库，如果需要链接静态库，此时需要加上 -static 参数

问题:如果库的名字有版本号，编译如何识别呢?
回答:此时需要建立一个软连接 连接到库，但是软连接文件的名称要符合库的命名规则(libxxx.a ,libxxx.so )

* 第三天<2016-07-31 Sun>
** 进程 和 程序
1.程序:一个文件，这个文件中存放的是机器码

2.进程:一个程序一次执行过程，在这个执行过程中伴随资源的分配和释放

资源 (内存，时间片，CPU资源)

3.Linux 对进程描述

struct task_struct{
    1.pid  //进程号
    2.ppid //父进程号
    3.一组寄存器值(pc寄存器:告诉cpu需要执行的指令所在内存中的地址)
    4.进程状态
      运行态(R),可中断等待态(S),不可中断等待态(D),停止态(T),僵尸态(Z)

    ....
}

** Linux 进程管理命令
*** 查看系统进程
  ps  -ef

  例如:
  ps -ef | grep 进程名
  ps -ef | grep 进程号

*** 查看系统进程状态
  ps aux

  例如:
  ps aux | grep 进程名
  ps aux | grep 进程号

*** 信号
  <1>kill -l
     显示系统中支持的信号

  <2>发一个信号给指定PID进程
     kill -信号编号  PID

     例如:
     发送SIGSTOP信号
     kill -19  PID  或 kill -SIGSTOP PID

  <3>发一个信号给指定进程名的进程
     killall -信号编号  进程名

*** 动态查看进程的信息
  top
*** 指定的进程的优先级
  在Linux 中通过nice值来影响进程的优先级，nice值越小进程的优先级越高
  nice值范围: [-20,19]

  (1)运行程序的时候，指定进程的nice值

  nice -nice值  执行的程序

  例如:
  nice   -1  ./while  -> nice值为 1
  nice  --1  ./while  -> nice值为-1

  (2)修改系统中进程的nice值
   renice  nice值  PID

   例如:
   renice  10   8123  -> 修改成nice值为  10
   renice  -10  8213  -> 修改成nice值为 -10

**  Linux 子进程创建

-------------------------------------------------------------------------------------
tags : 一个索引文件，根据索引文件可以找的符号所在文件定义

生成tags文件  ctags -R  --->递归当前目录所有文件，生成tags文件

如何使用呢?
vi -t  符号(函数名，结构体名，宏，typedef之后的名字)
此时vi编辑器会从当前目录寻找tags文件，来定位符号所在的文件

将光标停在要查看的单词上，然后跳转:
ctrl + ]

返回
ctrl + t
----------------------------------------------------------------------------------------

pid_t fork(void)
功能:复制父进程来创建子进程
返回值:
成功给父进程返回子进程PID,给子进程返回0,失败返回-1

问题:fork函数返回值不可能是什么?
回答:大于0(不可能父进程PID，不可能是1) ,小于0 ,等于 0

僵尸态子进程:子进程已经结束，但是父进程没有对其进行收尸处理
孤儿进程    :父进程先于子进程结束，子进程变成孤儿进程，孤儿进程自动被init进程收养

练习:一个父进程创建两个子进程,子进程1睡眠10秒然后退出，子进程2一直死循环，父进程创建完两个子进程后
一直死循环，然后通过ps aux 查看这些进程的状态

--------------------------------------------------------------------------------------------------
注意:
(1)创建子进程后,父子进程都是从fork()下一条语句执行
(2)创建子进程后,父子进程调度顺序不确定
(3)创建子进程后，父子进程的地址空间是独立的，父子进程修改的数据，不会相互影响
--------------------------------------------------------------------------------------------------

练习:
让父进程读取用户从键盘上输入的数据，然后就读取的数据写入到log.txt文件中，子进程从log.txt
读取数据，然后输出。如果用户输入的是"quit",则父子进程结束。

要求:文件在fork之前打开,使用文件IO API操作文件

** 僵尸态子进程处理
特点:子进程结束，父进程没有进行收尸处理，此时拥有PID号和它死亡的状态，其他的资源都已经释放。

如果僵尸态子进程很多，就会导致PID不够分配，最终无法创建子进程。所以，必须对僵尸态子进程进行收尸处理，来
释放它未释放的资源。

1.pid_t wait(int *status);
功能:等待子进程变成僵尸态，然后对僵尸态子进程进行收尸处理
参数:
@status 获取子进程结束时状态(通过这个状态，可以分析子进程死亡的原因)
返回值:
成功返回僵尸子进程的pid ,失败返回-1(没有子进程)

注意:它会使调用者阻塞,直到出现僵尸态子进程

2.pid_t waitpid(pid_t pid, int *status, int options);
参数:
@pid  子进程pid (只等待这个子进程，其他子进程不管) , -1 (任意子进程)
@status 获取子进程结束时状态
@options 0:阻塞方式调用(傻等)  WNOHANG:非阻塞方式调用(如果没有僵尸子进程立即返回)
返回值:
成功返回僵尸子进程的pid,如果是非阻塞方式调用，且没有子进程结束，此时返回0,如果没有子进程，调用失败返回-1


思考:等价于wait函数的waitpid
回答:waitpid(-1,&status,0);
* 第四天<2016-08-01 Mon>
** 进程结束
(1)_exit()
在任何地方调用，都是结束一个进程，它是系统调用接口

(2)exit()
在任何地方调用，都是结束一个进程，结束之前会刷新缓存

(3)从main函数返回
return 它在函数里面使用的时候，表示一个函数返回，如果从main函数返回，则表示进程结束

注意:
调用函数失败的时候，如果需要进程退出: exit(EXIT_FAILURE);
如果想进程正常结束:exit(EXIT_SUCCESS);

** 在一个进程启动另一个程序

问题:我们的程序在shell终端是如何运行起来?
回答:bash -> fork -> 创建子进程 -> 调用exec函数族中函数 ---> 执行我们的程序

exec 函数族:在一个进程启动另一个程序执行，将新程序的代码段，数据段，...替换原进程的代码段，数据段...
,只保留原进程的PID,其他全部替换


l(list) : 执行一个程序的时候，给程序传递的参数以参数列表传递
int execl(const char *path, const char *arg, ...);

int execl(程序所在的路径，程序名，给程序传递的参数1,给程序传递的参数2,....,NULL);


p(PATH): 执行一个程序的时候，在path环境变量下搜索程序
int execlp(const char *file, const char *arg, ...);

int execlp(程序名，程序名,给程序传递的参数1，给程序传递的参数2，...,NULL)

问题:在自己进程中启动ls程序，并且给他传递-l参数?

execlp("ls","ls","-l",NULL);

v(vector) : 参数以指针数组的形式传递
int execv(const char *path, char *const argv[]);

char *p_arry[] = {"ls","-l",NULL};
execv("/bin/ls",p_arry);

int execvp(const char *file, char *const argv[]);

char *p_arry[] = {"ls","-l",NULL};
execvp("ls",p_arry);


e(env) : 可以给程序传递环境变量
int execle(const char *path, const char *arg,..., char * const envp[]);
char *envp[] = {"环境变量名1=内容1:内容2",...,NULL};


练习:实现shell功能?
(1)execvp
(2)用户输入ls -l

** 守护进程

特点:可以一直在后台运行，不随着终端的关闭而结束，脱离于终端而存在

(1)创建子进程，父进程退出
(2)创建新会话
------------------------------------------------------------------------------------------
(3)改变进程的工作目录为根目录
(4)重设文件掩码
(5)关闭不需要文件描述符

练习:
    写日志时间的守护进程(每隔1秒，将系统的时间写入一个指定的文件)

** Linux 下多线程编程

1.线程概念

它是进程中最小执行单元，多个线程共享同一个进程的地址空间，参会操作系统统一调度

多线程优点:
(1)效率高
(2)线程间通信简单

缺点:
安全性差

2.线程创建


int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
              void *(*start_routine) (void *), void *arg);
参数:
@thread 获得线程ID
@attr   NULL:使用默认的属性
@start_routine  线程执行函数
@arg    传递给线程函数

返回值:
成功返回0, 失败返回错误码

练习:
在主线程有一个变量的值是100,然后创建两个子线程
子线程1,每隔1s 将主线程中变量值加1,子线程2每隔1s将主线程变量减1,主线程每隔1s输出这个变量的值


int pthread_detach(pthread_t thread);
功能:
将线程标记为分离式线程，分离式线程在结束的时候，系统自动释放它释放它未释放的资源


int pthread_join(pthread_t thread, void **retval)
功能:
等待一个线程结束，并且释放它未释放的资源
参数:
@thread  线程ID
@retval  获取等待的线程结束的时候，返回的值


void pthread_exit(void *retval);
功能:
让一个线程结束

参数:
@retval 返回的值


练习:
1.让线程1输出主线程数组的内容，让线程2对主线程数组的内容做逆序

int main()
{
    int a[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
}

互斥锁
* 第五天<2016-08-02 Tue>
** 多线程共享资源访问

原则:如果多个线程同时对共享资源操作，会有问题，就必须保证一个线程在访问共享资源的时候，其他线程不能
访问，保证访问的完整性。


*** 互斥锁

互斥：有你没我

(1)定义互斥锁

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;//静态初始化
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);//动态初始化


(2)获得互斥锁

int pthread_mutex_lock(pthread_mutex_t *mutex);
功能:获得互斥锁，如果无法获得互斥锁，则阻塞

int pthread_mutex_trylock(pthread_mutex_t *mutex);
功能:获得互斥锁，如果无法获得互斥锁，则不阻塞，立即返回


(3)释放互斥锁

int pthread_mutex_unlock(pthread_mutex_t *mutex);

注意:
当一个线程把锁释放的时候，并不表示另一个线程一定会立即获得锁，也有可能当前线程再次获得锁

*** 线程间同步

信号量 : 表示一类资源，信号量的值表示资源个数

(1)定义信号量
  sem_t sem;

(2)初始化信号量
  int sem_init(sem_t *sem, int pshared, unsigned int value);
  参数:
  @sem       信号量
  @pshared   0:线程间使用  非0:进程间使用
  @value     信号量的值
  返回值:
  成功返回0,失败返回-1

(3)P操作 , V操作

  P操作:申请资源
  V操作:释放资源

  信号量P操作
  int sem_wait(sem_t *sem);

  信号量V操作
  int sem_post(sem_t *sem);


*** 条件变量

(1)定义条件变量

pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);

(2)等待条件满足

int pthread_cond_wait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex);
工作原理:
如果条件不满足，则阻塞调用者(在阻塞之前，会将互斥锁释放)
如果条件满足，就会返回(在返回之前，需要获得互斥锁)


问题:什么时候条件满足
回答:其他线程调用了pthread_cond_signal或者pthread_cond_broadcast函数

(3)唤醒等待的线程

int pthread_cond_broadcast(pthread_cond_t *cond);//唤醒所有等待的条件的线程
int pthread_cond_signal(pthread_cond_t *cond);//唤醒第一个等待条件的线程

注意:
在唤醒A线程的时候，A线程必须在等待态

**  进程间通信

1.传统进程间通信
  无名管道,有名管道，信号

2.IPC 对象
  消息队列，共享内存，信号灯集

3.给予Socket字

4.Android 系统提供Binder机制

** 传统进程间通信方式
*** 无名管道
int pipe(int pipefd[2]);
参数:
@pipefd 获得操作管道的文件描述符
返回值:
成功返回0，失败返回-1

特点:
(1)pipefd[0] : 读管道,pipefd[1] : 写管道
(2)半双工工作方式
(3)只能由于具有亲缘关系的进程间通信
(4)管道中的数据，读出来就没有了

--------------------------------------------------------------------------------------------------------
管道读写规则:
(1)读端存在,写管道
  如果没有满,则写管道成功，如果管道已经满，则写管道阻塞

(2)读端不存在,写管道
  此时写管道没有意义，操作系统直接发送SIGPIPE信号，杀死写管道的进程

(3)写端存在，读管道
  如果管道中有数据，则读取数据，如果管道中没有数据，读管道会阻塞

(4)写端不存在,读管道
  如果管道中有数据，则读取数据，如果管道中没有数据，此时读管道不阻塞，立即返回0
---------------------------------------------------------------------------------------------------------
练习:
父进程向管道中输入数据，子进程从管道中读取数据，如果输入"quit",父子进程结束

*** 有名管道
特点:
它在文件系统中存在一个文件和有名管道对应，可以用于任意的进程间通信

**** 创建有名管道文件

int mkfifo(const char *pathname, mode_t mode);
@pathname 管道文件名
@mode     指定文件的权限
返回值:
成功返回0，失败返回-1


**** 打开文件
open

如果一端以只读方式打开有名管道文件，此时会阻塞，直到另一端以写方式的打开
如果一端以只写方式打开有名管道文件，此时会阻塞，直到另一端以读方式的打开

注意:读和写打开要同时进行

(3)读写
read / write

(4)关闭
close
* 第六天<2016-08-03 Wed>
** 信号
*** 进程对信号的处理方式

(1)忽略
(2)捕捉
   当进程收到一个信号后，就去执行信号处理函数

(3)默认方式处理
   大部分信号对进程的默认处理方式都是杀死进程

   SIGKILL,SIGSTOP 不能捕捉，也不能忽略
   SIGCHLD  子进程状态发生改变，父进程就会收到这个信号，默认处理是忽略
*** 设置进程对信号处理方式

int a;                      int
int *p;                     int *
int array[5];               int [5]
int (*pfun)(int ,int )      int (*)(int ,int )

typedef 就是给已有类型取别名，别名的位置就是变量的位置

typedef void (*sighandler_t)(int);

sighandler_t signal(int signum, sighandler_t handler);

sighandler_t signal(int signum, void (*handler)(int ));

void (*)(int) signal(int signum,void (*handler)(int )); (错误)

void (*signal(int signum,void (*handler)(int)))(int);

---------------------------------------------------------------------------------------------
sighandler_t signal(int signum, sighandler_t handler);
功能:设置进程对信号的处理方式
参数:
@signum   信号的编号
@handler  SIG_IGN:忽略  SIG_DFL:默认处理  一个函数的入口地址:捕捉
返回值:
成功返回handler,失败返回SIG_ERR (-1)

练习:
回收僵尸态子进程，父进程不轮询，不阻塞方式回收

*** 给进程发信号
int kill(pid_t pid, int sig);

4.进程等待
int pause();

5.设置定时器
unsigned int alarm(unsigned int seconds);
当时间减到的0的时候，操作系统会给发送SIGALRM信号
