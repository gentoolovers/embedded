* 第一天
** 基本概念

1.库 : 一组实现好的函数接口

2.系统调用:操作系统给用户空间提供的一组函数接口,我们可以通过这一组函数接口进入内核空间，从而使用
内核提供的服务

3.在Linux中，我们可以通过open系统调用打开一个文件，可以获得一个文件描述符(fd),这个fd表示打开的文件
 ,我们可以read系统调用来读文件，可以通过write系统调用来写文件，通过close系统调用关闭文件

** 文件相关系统调用函数
*** 打开文件
int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);
@pathname  文件的路径 例如:"/home/linux/hello.c"
@flags ：打开文件的方式
open代开文件得到文件描述符(fd)
O_RDONLY  只读
O_WRONLY  只写
O_RDWR    读写
O_CREAT   不存在则创建
O_APPEND  追加
O_TRUNC   存在则清空

注意:
(1)这些标示可以用"|"运算符连接在一起使用
(2)如果使用了O_CREAT参数，需要指定创建文件的权限

@mode 用来指定文件创建时的权限
注意:新建文件的实际权限 mode & ~umask

返回值:
成功返回文件描述符，失败返回-1

--------------------------------------------------------------
程序运行的时候，操作系统默认打开了标准输入，标准输出，标准出错
标准输入:0
标准输出:1
标准出错:2

文件描述符分配原则:最小未使用
-------------------------------------------------------------

练习:
以读写方式打开一个文件，如果文件不存在则创建，如果文件存在则清空，程序运行结束的时候
观察新创建文件权限是多少

*** 读文件

int read(int fd, void *buf, size_t count);
参数:
@fd  打开的文件
@buf 存放数据的地址
@count 期望读取字节数
返回值:
成功实际读取的字节数，失败返回-1,读到文件尾部返回0

*** 写文件

int write(int fd, void *buf, size_t count);
参数:
@fd  打开的文件
@buf 存放数据的地址
@count 需要写入的字节数
返回值:
成功实际写入的字节数，失败返回-1

练习:实现文件拷贝

./a.out srcfile destfile

(1)打开源文件  : O_RDONLY
(2)打开目标文件: O_WRONLY | O_CREAT |O_TRUNC

(3)实现思路
   从源文件中读取数据存放在buf中，然后将buf中的数据写入目标文件
