一 进程结束

(1)_exit() 
在任何地方调用，都是结束一个进程，它是系统调用接口

(2)exit() 
在任何地方调用，都是结束一个进程，结束之前会刷新缓存

(3)从main函数返回 
return 它在函数里面使用的时候，表示一个函数返回，如果从main函数返回，则表示进程结束

注意:
调用函数失败的时候，如果需要进程退出: exit(EXIT_FAILURE);
如果想进程正常结束:exit(EXIT_SUCCESS);

二 在一个进程启动另一个程序

问题:我们的程序在shell终端是如何运行起来?
回答:bash -> fork -> 创建子进程 -> 调用exec函数族中函数 ---> 执行我们的程序 

exec 函数族:在一个进程启动另一个程序执行，将新程序的代码段，数据段，...替换原进程的代码段，数据段...
,只保留原进程的PID,其他全部替换


l(list) : 执行一个程序的时候，给程序传递的参数以参数列表传递
int execl(const char *path, const char *arg, ...);

int execl(程序所在的路径，程序名，给程序传递的参数1,给程序传递的参数2,....,NULL);


p(PATH): 执行一个程序的时候，在path环境变量下搜索程序
int execlp(const char *file, const char *arg, ...);

int execlp(程序名，程序名,给程序传递的参数1，给程序传递的参数2，...,NULL)

问题:在自己进程中启动ls程序，并且给他传递-l参数?

execlp("ls","ls","-l",NULL);

v(vector) : 参数以指针数组的形式传递
int execv(const char *path, char *const argv[]);

char *p_arry[] = {"ls","-l",NULL};
execv("/bin/ls",p_arry);

int execvp(const char *file, char *const argv[]);

char *p_arry[] = {"ls","-l",NULL};
execvp("ls",p_arry);


e(env) : 可以给程序传递环境变量
int execle(const char *path, const char *arg,..., char * const envp[]);
char *envp[] = {"环境变量名1=内容1:内容2",...,NULL};


练习:实现shell功能?
(1)execvp 
(2)用户输入ls -l 

三 守护进程 

特点:可以一直在后台运行，不随着终端的关闭而结束，脱离于终端而存在

(1)创建子进程，父进程退出
(2)创建新会话 
------------------------------------------------------------------------------------------
(3)改变进程的工作目录为根目录
(4)重设文件掩码
(5)关闭不需要文件描述符 

练习:
	写日志时间的守护进程(每隔1秒，将系统的时间写入一个指定的文件)


四 Linux 下多线程编程

1.线程概念 

它是进程中最小执行单元，多个线程共享同一个进程的地址空间，参会操作系统统一调度

多线程优点:
(1)效率高
(2)线程间通信简单

缺点:
安全性差

2.线程创建 


int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
			  void *(*start_routine) (void *), void *arg);
参数:
@thread 获得线程ID
@attr   NULL:使用默认的属性
@start_routine  线程执行函数
@arg    传递给线程函数 

返回值:
成功返回0, 失败返回错误码

练习:
在主线程有一个变量的值是100,然后创建两个子线程
子线程1,每隔1s 将主线程中变量值加1,子线程2每隔1s将主线程变量减1,主线程每隔1s输出这个变量的值


int pthread_detach(pthread_t thread);
功能:
将线程标记为分离式线程，分离式线程在结束的时候，系统自动释放它释放它未释放的资源 


int pthread_join(pthread_t thread, void **retval)
功能:
等待一个线程结束，并且释放它未释放的资源
参数:
@thread  线程ID 
@retval  获取等待的线程结束的时候，返回的值 


void pthread_exit(void *retval);
功能:
让一个线程结束 

参数:
@retval 返回的值 


练习:
1.让线程1输出主线程数组的内容，让线程2对主线程数组的内容做逆序

int main()
{
	int a[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
}

互斥锁
