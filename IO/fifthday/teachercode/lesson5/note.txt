一 多线程共享资源访问

原则:如果多个线程同时对共享资源操作，会有问题，就必须保证一个线程在访问共享资源的时候，其他线程不能
访问，保证访问的完整性。


1.互斥锁

互斥：有你没我

(1)定义互斥锁

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;//静态初始化
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);//动态初始化


(2)获得互斥锁 

int pthread_mutex_lock(pthread_mutex_t *mutex);
功能:获得互斥锁，如果无法获得互斥锁，则阻塞

int pthread_mutex_trylock(pthread_mutex_t *mutex);
功能:获得互斥锁，如果无法获得互斥锁，则不阻塞，立即返回


(3)释放互斥锁

int pthread_mutex_unlock(pthread_mutex_t *mutex);

注意:
当一个线程把锁释放的时候，并不表示另一个线程一定会立即获得锁，也有可能当前线程再次获得锁

2.线程间同步 

信号量 : 表示一类资源，信号量的值表示资源个数 

(1)定义信号量 
  sem_t sem;

(2)初始化信号量
  int sem_init(sem_t *sem, int pshared, unsigned int value);
  参数:
  @sem       信号量 
  @pshared   0:线程间使用  非0:进程间使用
  @value     信号量的值 
  返回值:
  成功返回0,失败返回-1 

(3)P操作 , V操作

  P操作:申请资源
  V操作:释放资源 

  信号量P操作 	
  int sem_wait(sem_t *sem);

  信号量V操作
  int sem_post(sem_t *sem); 


3.条件变量 

(1)定义条件变量 

pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);

(2)等待条件满足 

int pthread_cond_wait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex);
工作原理:
如果条件不满足，则阻塞调用者(在阻塞之前，会将互斥锁释放)
如果条件满足，就会返回(在返回之前，需要获得互斥锁)


问题:什么时候条件满足 
回答:其他线程调用了pthread_cond_signal或者pthread_cond_broadcast函数 

(3)唤醒等待的线程 

int pthread_cond_broadcast(pthread_cond_t *cond);//唤醒所有等待的条件的线程
int pthread_cond_signal(pthread_cond_t *cond);//唤醒第一个等待条件的线程 

注意:
在唤醒A线程的时候，A线程必须在等待态


二 进程间通信

1.传统进程间通信
  无名管道,有名管道，信号 

2.IPC 对象
  消息队列，共享内存，信号灯集 

3.给予Socket字

4.Android 系统提供Binder机制


三 传统进程间通信方式

1.无名管道 
int pipe(int pipefd[2]);
参数:
@pipefd 获得操作管道的文件描述符 
返回值:
成功返回0，失败返回-1

特点:
(1)pipefd[0] : 读管道,pipefd[1] : 写管道
(2)半双工工作方式
(3)只能由于具有亲缘关系的进程间通信
(4)管道中的数据，读出来就没有了

--------------------------------------------------------------------------------------------------------
管道读写规则:
(1)读端存在,写管道 
  如果没有满,则写管道成功，如果管道已经满，则写管道阻塞

(2)读端不存在,写管道 
  此时写管道没有意义，操作系统直接发送SIGPIPE信号，杀死写管道的进程
 
(3)写端存在，读管道 
  如果管道中有数据，则读取数据，如果管道中没有数据，读管道会阻塞

(4)写端不存在,读管道 
  如果管道中有数据，则读取数据，如果管道中没有数据，此时读管道不阻塞，立即返回0 
---------------------------------------------------------------------------------------------------------
练习:
父进程向管道中输入数据，子进程从管道中读取数据，如果输入"quit",父子进程结束

2.有名管道 

特点:
它在文件系统中存在一个文件和有名管道对应，可以用于任意的进程间通信 

(1)创建有名管道文件

int mkfifo(const char *pathname, mode_t mode);
@pathname 管道文件名
@mode     指定文件的权限
返回值:
成功返回0，失败返回-1 


(2)打开文件 
open 

如果一端以只读方式打开有名管道文件，此时会阻塞，直到另一端以写方式的打开
如果一端以只写方式打开有名管道文件，此时会阻塞，直到另一端以读方式的打开

注意:读和写打开要同时进行

(3)读写 
read / write 

(4)关闭  
close



